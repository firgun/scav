Todo
---

Actor refactor [_]
--
My version of ECS is not that good, it makes developing subsystems needlessly
complex by the unnecessary constraint of component separate from data.  I
should have an entity have common components directly stuck on the entity or
easily accessible from some getter function.

The issue is, I think, if I am going to get more free form with this stuff then
I must do more advanced serialization.

Event dispatch [_]
---
Create event system which dispatches events to the focused item, do the
simple thing first, just have one focused submoduled to which events are
dispatched


Occluder [_]
---
Create a structure that stops mouse clicks from going through the console,
through panels etc. I think each submodule can have an occlusion layer,
blocking sublayers ... the imgui stuff seems more complex.


Editor actor manipulation tools [_]
---
Translation, scaling and rotation


Pointer/Advanced serialization [_]
---
Right now we are using IDs which is really cumbersome, it would be nice if we
can have references from components to entities be serialized as IDs and
deserialized as pointers.

I think the best way to do this is a mixture of a generalized procedure, having
some structure meta data and using :serialize() methods if present.

So first check if an object has a :serialize() method, writes it data to some
output handle, if not then we can consult a sub-structural type table that says
how to serialize different types of components like Transforms for example

Or we can go serialize all the way down, or just have one serialize method for
say actors wherein we just know all the types of components, but that won't
scale well.

Perhaps consider a different, more readable format? Then I could build prefabs
more easily directly from text files.


Keychord registry [_]
---
I am getting to the point where I want to have more serious keychord handling,
like Ctrl-S to save the world, but only when the game is not running, for
example. This is likely going to be combined with the event system


Contact freelance artist [_]
---
Need to see pricing for freelance artists willing to work on game and engine
art.


Center text in box, helper function [_]
---
At least two subsystems require this, so I should abstract it out for IMGUI and
Console stuff.


Point lies in polygon, helper function [_]
---
First make sure that love2D does not provide an implementation for me already.


Done
---
[x] have behaviours declare their component requirements and inject them into
the behaviour so we don't have to call FindComponent manually and check it's
result etc.
[x] create an example suitable for testing if world to screen transformation
logic is working correctly
[x] implement  world to screen camera transformation
[x] implement world serialization
[x] stress test world serialization with 1000 entities (gulp, it's already a
couple k at >100 entities), it works fine, so we could create chunks of 1000
entities
[x] entity transform scaling
[x] entity transform rotation (have to put this on the backlog for now, going
to refactor transformation stuff to use love api directly instead)
[x] Implement rendering layers
[x] Create character controller
	* offset and resize character's draw rect, such that it's sitting above
	  the transform position
	* implement basic movement controls
[x] Create tile map system
[x] logging system: info, error, warning. write logs to multiple io destinations
[x] in game console, reads log files every so often
[x] create global configuration system
[x] test configuration system with console
[x] scale editor camera movement speed relative to zoom
	* i.e. should move faster if more zoomed out and slower if more zoomed
	  in. Also, zoom speed should be faster when more zoomed in and slower
when more zoomed out
[x] do editor gizmo system, whereby entities can be configured to show certain
gizmos
[x] refactoring drawing code to use loves transformation API ...
		* See the following functions
		* love.graphics.push()
		* love.graphics.translate()
		* love.graphics.scale()
		* love.graphics.rotate()
		* love.graphics.pop()
[x] Implement parent transformed entities


